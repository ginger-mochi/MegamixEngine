<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>-1</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Debug keys
global.isInvincible = false;
global.alwaysHealth = false;
global.freeMovement = false;

// recording input
global.recordInputMode = 0; // 0: naught, 1: record, 2: playback
global.recordInputFidelityMessageBuffer = "";

// console lines
global.consoleN = 0;

// debug objectviewer
viewObjects = 0;
viewObjectsScroll = 0;
viewUsageStats = 0;

// screenshots
screenshotNum = 0;
screenshotTimer = 0.0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// console update
var CONSOLE_MAX = 16;
draw_set_halign(fa_left);
draw_set_valign(fa_bottom);
for (var i = 0; i &lt; CONSOLE_MAX &amp;&amp; i &lt; global.consoleN; i++)
{
    var messageN = global.consoleN - i - 1;
    global.consoleTimer[messageN] += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Debug keys

// Reset game
if (keyboard_check_pressed(vk_f2))
{
    audio_stop_all();
    stopMusic();
    game_restart();
}

// Change screen size
if (keyboard_check_pressed(vk_f3))
{
    var pre = global.screensize;
    
    setScreenSize(global.screensize + 1);
    
    if (global.screensize == pre)
    {
        setScreenSize(1);
    }
}

// Toggle fullscreen
if (keyboard_check_pressed(vk_f4))
{
    if (window_get_fullscreen())
    {
        setScreenSize(global.screensize);
    }
    else
    {
        setScreenSize(9999); // definitely going to set it to fullscreen   :P
    }
}

// Screenshot
if (keyboard_check_pressed(vk_f9))
{
    while (file_exists(working_directory + "\screenshots\screenshot" + string(screenshotNum) + ".png"))
        screenshotNum += 1;
    screen_save(working_directory + "\screenshots\screenshot" + string(screenshotNum) + ".png");
    print("SCREENSHOT SAVED", WL_SHOW, c_orange);
    playSFX(sfxKeyGet);
}

// Quit
if (keyboard_check_pressed(vk_escape) &amp;&amp; global.escapeBehavior == 0)
{
    game_end();
}

if (!global.debugEnabled)
{
    exit;
}

// free movement
if (keyboard_check_pressed(ord('1')))
{
    global.levelRunValid = false;
    global.levelRunInvalidReason = "free movement debug";
    playSFX(sfxSkullAmulet);
    
    global.freeMovement = !global.freeMovement;
    
    if (instance_exists(objMegaman))
    {
        with (objMegaman)
        {
            if (global.freeMovement == false)
            {
                iFrames = 0;
                blockCollision = true;
                visible = true;
            }
            
            spriteX = 0;
            spriteY = 0;
        }
    }
}

// Debug Menu
if (keyboard_check_pressed(ord('2')) &amp;&amp; !global.frozen
    &amp;&amp; !instance_exists(objDebugMenu) &amp;&amp; instance_exists(objMegaman))
{
    instance_create(view_xview[0], view_yview[0], objDebugMenu);
}

if (keyboard_check_pressed(ord('3'))) // show objects
{
    viewObjects ^= true;
    viewObjectsScroll = 0;
}

if (keyboard_check_pressed(ord('4'))) // show objects
{
    viewUsageStats ^= true;
}

if (keyboard_check(vk_up))
{
    viewObjectsScroll--;
}
if (keyboard_check(vk_down))
{
    viewObjectsScroll++;
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Effects
if (global.alwaysHealth)
{
    with (objMegaman)
    {
        global.playerHealth[playerID] = 28;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// none
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Console
var CONSOLE_MAX = 16;
draw_set_halign(fa_left);
draw_set_valign(fa_bottom);
for (var i = 0; i &lt; CONSOLE_MAX &amp;&amp; i &lt; global.consoleN; i++)
{
    var messageN = global.consoleN - i - 1;
    draw_set_color(global.consoleColour[messageN]);
    draw_set_alpha(roundTo(clamp(lerp(5, 0, global.consoleTimer[messageN] / 120), 0, 1), 0.2));
    draw_text(view_xview[0], view_yview[0] + view_hview[0] - 12 * i, global.consoleMessage[messageN]);
    draw_set_alpha(1);
}

draw_set_valign(fa_top);

// Debug info panel.
if (viewObjects)
{
    
    var objects, objectNames;
    objects[0] = objGlobalControl;
    
    with (all)
    {
        arrayAppendUnique(objects, object_index);
    }
    
    // sort objects by ID.
    quickSort(objects);
    
    var drawX, drawY;
    var rowHeight = 14; 
    for (var i = 0; i &lt; array_length_1d(objects); i++)
    {
        var rowColor;
        if (i % 2)
        {
            rowColor = c_gray;
        }
        else
        {
            rowColor = c_ltgray;
        }
        drawX = view_xview[0];
        drawY = view_yview[0] - viewObjectsScroll + i*rowHeight;
        draw_set_alpha(0.3);
        draw_set_color(rowColor);
        draw_rectangle(drawX, drawY, drawX + view_wview[0], drawY + rowHeight - 1, false);
        draw_set_alpha(0.7);
        draw_set_color(c_white)
        var instanceCount = instance_number(objects[i]);
        var isEntity = object_is_ancestor(objects[i], prtEntity);
        var strLeft = object_get_name(objects[i]);
        var strCount = "";
        if (instanceCount &gt; 1)
        {
            strCount = string(instanceCount) + "x ";
            if (isEntity)
            {
                var aliveCount = 0;
                with (objects[i])
                {
                    aliveCount += !dead;
                }
                
                strCount = string(aliveCount) + "/" + strCount;
            }
        }
        
        draw_set_halign(fa_left);
        draw_text(drawX + 4, drawY + 2, strCount + strLeft);
        
        if (instanceCount == 1)
        {
            var strRight = string(objects[i].id);
            draw_set_halign(fa_right);
            draw_text(drawX + view_wview[0] - 4, drawY + 2, strRight);
        }
    }
    
    // shouldn't be in draw, but convenient because of drawY calculation.
    viewObjectsScroll = max(min(viewObjectsScroll, drawY - view_hview[0] - view_yview[0]), 0);
    draw_set_halign(fa_left);
}

draw_set_alpha(1);

if (viewUsageStats)
{
    var drawX = view_xview[0];
    var drawY = view_yview[0] + view_hview[0] - 48;
    
    draw_set_color(c_black);
    draw_rectangle(drawX, drawY, drawX + view_wview[0], drawY + view_hview[0], false);
    
    draw_set_color(c_white);
    
    var infoString = "";
    var lockPoolsUsed = 0;
    for (var i = 0; i &lt; global.lockPoolN; i++)
    {
        lockPoolsUsed += !global.lockPoolAvailable[i];
    }
    
    infoString += "LPs: " + string(lockPoolsUsed)+ "; ";
    
    draw_text_ext(drawX + 2, drawY + 2, infoString, 2, view_wview[0] - 4);
}

draw_set_valign(fa_bottom);

// recording / playback sign
if (global.recordInputMode &gt; 0)
{
    if ((global.recordInputFrame mod 30) &gt;= 15)
    {
        draw_set_halign(fa_right);
        if (global.recordInputFidelity &gt;= 0)
        {
            if (global.recordInputMessage == 0)
            {
                draw_sprite(sprRecPlay, global.recordInputMode - 1,
                    view_xview[0] + view_wview[0] - 32,
                    view_yview[0] + view_hview[0] - 48);
                draw_text(view_xview[0] + view_wview[0] - 64,
                    view_yview[0] + view_hview[0] - 16,
                    global.recordInputFrame);
            }
            else
            {
                draw_text(
                    view_xview[0] + view_wview[0] - 32,
                    view_yview[0] + view_hview[0] - 48,
                    global.recordInputMessage);
            }
        }
        else
        {
            draw_set_color(c_yellow);
            draw_text(
                view_xview[0] + view_wview[0] - 32,
                view_yview[0] + view_hview[0] - 48,
                "LO-FI");
        }
    }
}

draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
