<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTogehero</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// col = 0 = greenish, 1 = blue, 2 = red
event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "cluster, floating";

grav = 0;
blockCollision = 0;

facePlayerOnSpawn = true;

// Enemy specific code
image_speed = 0.1;

calibrated = 0;
action = 0;
actionTimer = 0;

col = 0;
init = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    init = 0;
    switch (col)
    {
        case 0:
            sprite_index = sprTogehero;
            break;
        case 1:
            sprite_index = sprTogeheroBlue;
            break;
        case 2:
            sprite_index = sprTogeheroRed;
            break;
    }
}

event_inherited();

if (entityCanStep())
{
    if (action)
    {
        actionTimer += 1;
        if (actionTimer == 64)
        {
            action += 1;
            actionTimer = 0;
            yspeed *= -1;
        }
    }
}
else if (dead)
{
    action = 0;
    actionTimer = 0;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// spawn event
event_inherited();

if (spawned)
{
    action = 1;
    actionTimer = 16;
    xspeed = 0.5 * image_xscale;
    yspeed = -0.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Serialize instance variables.
/// This code was autogenerated by addSerialization.py

// Before editing manually, remove the following tag so that
// this event is not replaced when autogenerated again.

// @autogenerate

event_inherited();

if (global.stateCodecEncode)
{
    buffer_write(global.stateCodecBuffer, buffer_f32, action);
    buffer_write(global.stateCodecBuffer, buffer_f32, actionTimer);
    buffer_write(global.stateCodecBuffer, buffer_f32, calibrated);
    buffer_write(global.stateCodecBuffer, buffer_f32, col);
    buffer_write(global.stateCodecBuffer, buffer_f32, init);
}
else
{
    action = buffer_read(global.stateCodecBuffer, buffer_f32);
    actionTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    calibrated = buffer_read(global.stateCodecBuffer, buffer_f32);
    col = buffer_read(global.stateCodecBuffer, buffer_f32);
    init = buffer_read(global.stateCodecBuffer, buffer_f32);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
