<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprArigockG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// An antlion enemy that spits up spiked projectiles.

event_inherited();

// @cc - Use this to change colours: 0 (default) = red, 1 = hot pink, 2 = blue
col = 0;

healthpointsStart = 3;
healthpoints = healthpointsStart;
category = "grounded, nature";

// not confirmed
contactDamage = 3;

animTimer = 0;
phase = 0;

// time to wait before beginning to shoot
init_time = 30;

// time between shots
shoot_time = 30;

// shots per volley
volley_n = 4;

// time to wait after each volley
wait_time = 120;

// speed of shot
shot_xspeed = 1;
high_shot_yspeed = -6;
low_shot_yspeed = -4.5;
imgOffset = 0;
// animation slowness
at = 3;


image_speed = 0;
obj = objArigockGSpike;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
imgOffset = col * 3;
if (entityCanStep())
{   
    if (phase == 0)
    {
        image_index = 0 + imgOffset;
        if (animTimer &gt; init_time)
        {
            phase = 1;
            animTimer = 0;
        }
    }
    else if (phase == volley_n + 1)
    {
        // sleep briefly
        image_index = 0 + imgOffset;
        
        // stretch briefly:
        if ((wait_time - animTimer) &lt; at * 2)
            image_index = 1 + imgOffset;
        if (animTimer &gt; wait_time)
        {
            animTimer = 0;
            phase = 0;
        }
    }
    else
    {
        if (abs(animTimer - 2 * at) &lt; 2 * at)
            image_index = 1 + imgOffset;
        if (abs(animTimer - 2 * at) &lt; at)
            image_index = 2 + imgOffset;
        if (animTimer == 2 * at)
        {
            // create projectile
            playSFX(sfxCannonShoot);
            with (instance_create(x + 8, y - 16, obj))
            {
                yspeed = other.high_shot_yspeed;
                switch (other.col)
                {
                    // Hot pink
                    case 1:
                        image_index = 1;
                        break;
                    // Blue
                    case 2:
                        image_index = 2;
                        break;
                }
                if (other.phase == 1 || other.phase == other.volley_n)
                    yspeed = other.low_shot_yspeed;
                xspeed = (1 - 2 * (other.phase mod 2)) * other.shot_xspeed;
            }
        }
        
        // volley
        if (animTimer &gt; shoot_time)
        {
            animTimer = 0;
            phase += 1;
        }
    }
    
    animTimer++;
}
else if (dead)
{
    animTimer = 0;
    phase = 0;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Serialize instance variables.
/// This code was autogenerated by addSerialization.py

// Before editing manually, remove the following tag so that
// this event is not replaced when autogenerated again.

// @autogenerate

event_inherited();

if (global.stateCodecEncode)
{
    buffer_write(global.stateCodecBuffer, buffer_f32, animTimer);
    buffer_write(global.stateCodecBuffer, buffer_f32, at);
    buffer_write(global.stateCodecBuffer, buffer_f32, col);
    buffer_write(global.stateCodecBuffer, buffer_f32, high_shot_yspeed);
    buffer_write(global.stateCodecBuffer, buffer_f32, imgOffset);
    buffer_write(global.stateCodecBuffer, buffer_f32, init_time);
    buffer_write(global.stateCodecBuffer, buffer_f32, low_shot_yspeed);
    stateCodecPrimitiveEncode(obj);
    buffer_write(global.stateCodecBuffer, buffer_f32, phase);
    buffer_write(global.stateCodecBuffer, buffer_f32, shoot_time);
    buffer_write(global.stateCodecBuffer, buffer_f32, shot_xspeed);
    buffer_write(global.stateCodecBuffer, buffer_f32, volley_n);
    buffer_write(global.stateCodecBuffer, buffer_f32, wait_time);
}
else
{
    animTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    at = buffer_read(global.stateCodecBuffer, buffer_f32);
    col = buffer_read(global.stateCodecBuffer, buffer_f32);
    high_shot_yspeed = buffer_read(global.stateCodecBuffer, buffer_f32);
    imgOffset = buffer_read(global.stateCodecBuffer, buffer_f32);
    init_time = buffer_read(global.stateCodecBuffer, buffer_f32);
    low_shot_yspeed = buffer_read(global.stateCodecBuffer, buffer_f32);
    obj = stateCodecPrimitiveDecode();
    phase = buffer_read(global.stateCodecBuffer, buffer_f32);
    shoot_time = buffer_read(global.stateCodecBuffer, buffer_f32);
    shot_xspeed = buffer_read(global.stateCodecBuffer, buffer_f32);
    volley_n = buffer_read(global.stateCodecBuffer, buffer_f32);
    wait_time = buffer_read(global.stateCodecBuffer, buffer_f32);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
