<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMegaman</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>mskMegaman</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

faction = 1;
shiftVisible = 3;

despawnRange = -1;

stopOnFlash = 0;

killOverride = false;

dieToSpikes = true;

// co-op variables:
playerID = 0;
costumeID = 0;
fanoutDistance = 0;

// Physics variables
grav = 0.25; // The player's gravity
gravfactor = 1;
gravWater = 0.38 * grav; // The player's gravity in water
gravDir = 1;

jumpSpeed = 4.75 + grav * 2; // Dunno why grav needs to be multiplied by 2, but MM jumps as high as in MM5 when doing so
jumpSpeedWater = 0.1;

// jumpSpeedWater = 4.85 + grav*2;

walkSpeed = 1.3; // walkSpeed = 1.296875;
oilWalk = 0.3;
maxVspeed = 7;

premask = mask_index;
stepSpeed = 1 / 7;
stepFrames = 7;

iceDec = 0.025; // The deceleration on ice when not holding any buttons
iceDecWalk = 0.05; // The deceleration on ice when moving in the opposite direction

slideSpeed = 2.5;
slideFrames = 26;

// climbSpeed = 1.296875; //Official value of MM3
climbSpeed = 1.3;
hitTime = 32; // The amount of frames you experience knockback after getting hit

if (global.sturdyHelmet)
{
    hitTime = 10;
}

// Variables

// Lock certain actions
playerLockLocalInit();
hitLock = false;
climbLock = false;
shootStandStillLock = false;
slideLock = false;
icedLock = false;
slideChargeLock = false;
teleportLock = false;
shockLock = false;

ground = true;
xDir = 0;
yDir = 0;


prevXScale = image_xscale;
isStep = false;
stepTimer = 0;
canMinJump = false;
climbShootXscale = 1;
movementXScale = image_xscale;
xScaleOverride = 0;

isShoot = false;
shootTimer = 0;

isSlide = false;
slideTimer = 0;
firstSlideMask = mskMegamanSlide;
secondSlideMask = mskMegamanSlide2;

canHit = false;
isHit = false;

isShocked = false; // had to resort to this ~dracmeister
shockedTime = 0; // for how long?

isCharge = false;
chargeTimer = 0;
initChargeTimer = 0; // The timer for when to start charging after exiting the shooting animation

climbing = false;
climbSpriteTimer = 0;

quickWeaponScrollTimer = 25;

teleporting = false;
showDuringReady = false;
showReady = false;
readyTimer = 0;
teleportTimer = 0;
teleportImg = 0;

playLandSound = true; // Should we play the landing SFX when colliding with a floor? (Disabled on ladders, for example)
blinkTimer = 0; // Timer for MM's blinking animation when standing still
blinkTimerMax = 120;
blinkImage = 0; // 0 for no blinking, 1 for blinking
blinkDuration = 8; // The amount of frames the blinking lasts
drawWeaponIcon = false; // Whether or not we should draw the weapon icon above our head (used when using quick weapon switching)

deathByPit = false; // Did we die by falling in a bottomless pit?
dieToPit = true;
isSolid = 0;
statusObject = noone;
statusSliding = true;
plt = 0;
isFrozen = 0;
freezeTimer = 0;
inked = false;


// vehicle: the instance of a vehicle mega man
// is embarked in.
vehicle = noone;
deathTimer = -1;
playerPalette();

// Show the READY text
showReady = false; // this is set to true by objGlobalControl.
readyTimer = 0;


// Camera
viewPlayer = 1;

//Jump Counter
jumpCounter = 0;
jumpCounterMax = 1; //If you want multiple jumps then increase this

//Dash things
dashSlide = false; // Dash enabled?
dashJumped = false;
multiJumpDashCancel = true; //controls whether dash momentum is removed after multiple jumps.

//Contact Damage Multiplier
contactDamageMultiplier = 1; //you can increase this to multiply the amount of damage mega man takes from a certain object.

// Animation Initiation
spriteX = 0;
spriteY = 0;
animNameID = 0;
spriteLoopStart = 0;
spriteLoopEnd = 1;
spriteLoopSpeed = 1;
spriteLoopID = 0;
spriteLoopPoint = 0;
for (i = 0; i &lt;= 99; i += 1)
{
    spriteIDX[i] = 0;
    spriteIDY[i] = 0;
}
animSpinOffset = 0;
animSpinTurn = 1;

paletteRefresh = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playerEndStep();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// costumeID needs to be set here or it won't display correctly.
switch (global.characterSelected[playerID])
{ 
    default: 
        break;
    case "Mega Man":
        costumeID = 0;
        break;
    case "Proto Man":
        costumeID = 1;
        break;
    case "Bass":
        costumeID = 2;
        break;
    case "Roll":
        costumeID = 3;
        break;
}

// corrects palette
if (paletteRefresh == 0)
{
    playerPalette(); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (global.characterSelected[playerID])
{ 
    default: //you can define step code here that needs to be run on every frame for a specific character. Proto man is the only character that needs to be changed for this specifically, due to his shield so he uses a different script.
    case "Roll":
    case "Mega Man":
    case "Bass":
        playerStepEventDefault();
        break;
    case "Proto Man":
        playerStepEventProto();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (spawned)
{
    switch (global.characterSelected[playerID])
    { 
        default: //define any variables that need to be overwritten here for a specific character. Note that the costume ID variables are assumed to be in their default values
            break;
        case "Mega Man":
        {
            costumeID = 0;
            break;
        }
        case "Proto Man":
        {
            contactDamageMultiplier = 2; //Proto Man takes double damage like in MM10
            costumeID = 1;
            break;
        }
        case "Bass":
        {
            jumpCounterMax = 2; //Bass has double jumping
            dashSlide = true; //Bass can dash
            multiJumpDashCancel = true; //dash momentum no longer applies when a jump is done in midair with bass
            firstSlideMask = mskMegaman;//This also applies to dash masks
            secondSlideMask = mskMegaman;//same as above
            costumeID = 2;
            break;
        }
        case "Roll":
        {
            costumeID = 3;
            break;
        }
    }
    switch (global.characterSelected[0])
    {
        default: //Weapon Names and Icons. This is to prevent multiplayer from confusing the game
        case "Mega Man":
        {
            global.weaponName[0] = "MEGA BUSTER"
            global.weaponIcon[0] = sprWeaponIconsMegaBuster;
            break;
        }
        case "Proto Man":
        {
            global.weaponName[0] = "PROTO BUSTER"
            global.weaponIcon[0] = sprWeaponIconsMegaBuster;
            break;
        }
        case "Bass":
        {
            global.weaponName[0] = "BASS BUSTER"
            global.weaponIcon[0] = sprWeaponIconsBassBuster;
            break;
        }
        case "Roll":
        {
            global.weaponName[0] = "ROLL BUSTER"
            global.weaponIcon[0] = sprWeaponIconsMegaBuster;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.difficulty == DIFF_EASY)
{
    global.damage = max(1, global.damage div 2);
}
global.damage *= contactDamageMultiplier;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.playerHealth[playerID] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playerGetHit(global.damage);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Serialize instance variables.
/// This code was autogenerated by addSerialization.py

// Before editing manually, remove the following tag so that
// this event is not replaced when autogenerated again.

// @autogenerate

event_inherited();

if (global.stateCodecEncode)
{
    buffer_write(global.stateCodecBuffer, buffer_f32, animNameID);
    buffer_write(global.stateCodecBuffer, buffer_f32, animSpinOffset);
    buffer_write(global.stateCodecBuffer, buffer_f32, animSpinTurn);
    buffer_write(global.stateCodecBuffer, buffer_f32, blinkDuration);
    buffer_write(global.stateCodecBuffer, buffer_f32, blinkImage);
    buffer_write(global.stateCodecBuffer, buffer_f32, blinkTimer);
    buffer_write(global.stateCodecBuffer, buffer_f32, blinkTimerMax);
    buffer_write(global.stateCodecBuffer, buffer_f32, canMinJump);
    buffer_write(global.stateCodecBuffer, buffer_f32, chargeTimer);
    buffer_write(global.stateCodecBuffer, buffer_f32, climbLock);
    buffer_write(global.stateCodecBuffer, buffer_f32, climbShootXscale);
    buffer_write(global.stateCodecBuffer, buffer_f32, climbSpeed);
    buffer_write(global.stateCodecBuffer, buffer_f32, climbSpriteTimer);
    buffer_write(global.stateCodecBuffer, buffer_f32, climbing);
    buffer_write(global.stateCodecBuffer, buffer_f32, contactDamageMultiplier);
    buffer_write(global.stateCodecBuffer, buffer_f32, costumeID);
    buffer_write(global.stateCodecBuffer, buffer_f32, dashJumped);
    buffer_write(global.stateCodecBuffer, buffer_f32, dashSlide);
    buffer_write(global.stateCodecBuffer, buffer_f32, deathByPit);
    buffer_write(global.stateCodecBuffer, buffer_f32, deathTimer);
    buffer_write(global.stateCodecBuffer, buffer_f32, dieToPit);
    buffer_write(global.stateCodecBuffer, buffer_f32, drawWeaponIcon);
    buffer_write(global.stateCodecBuffer, buffer_f32, fanoutDistance);
    stateCodecPrimitiveEncode(firstSlideMask);
    buffer_write(global.stateCodecBuffer, buffer_f32, freezeTimer);
    buffer_write(global.stateCodecBuffer, buffer_f32, gravDir);
    stateCodecPrimitiveEncode(gravWater);
    buffer_write(global.stateCodecBuffer, buffer_f32, gravfactor);
    buffer_write(global.stateCodecBuffer, buffer_f32, hitLock);
    buffer_write(global.stateCodecBuffer, buffer_f32, hitTime);
    buffer_write(global.stateCodecBuffer, buffer_f32, i);
    buffer_write(global.stateCodecBuffer, buffer_f32, iceDec);
    buffer_write(global.stateCodecBuffer, buffer_f32, iceDecWalk);
    buffer_write(global.stateCodecBuffer, buffer_f32, icedLock);
    buffer_write(global.stateCodecBuffer, buffer_f32, initChargeTimer);
    buffer_write(global.stateCodecBuffer, buffer_f32, inked);
    buffer_write(global.stateCodecBuffer, buffer_f32, isCharge);
    buffer_write(global.stateCodecBuffer, buffer_f32, isFrozen);
    buffer_write(global.stateCodecBuffer, buffer_f32, isHit);
    buffer_write(global.stateCodecBuffer, buffer_f32, isShocked);
    buffer_write(global.stateCodecBuffer, buffer_f32, isShoot);
    buffer_write(global.stateCodecBuffer, buffer_f32, isSlide);
    buffer_write(global.stateCodecBuffer, buffer_f32, isStep);
    buffer_write(global.stateCodecBuffer, buffer_f32, jumpCounter);
    buffer_write(global.stateCodecBuffer, buffer_f32, jumpCounterMax);
    stateCodecPrimitiveEncode(jumpSpeed);
    buffer_write(global.stateCodecBuffer, buffer_f32, jumpSpeedWater);
    buffer_write(global.stateCodecBuffer, buffer_f32, maxVspeed);
    stateCodecPrimitiveEncode(movementXScale);
    buffer_write(global.stateCodecBuffer, buffer_f32, multiJumpDashCancel);
    buffer_write(global.stateCodecBuffer, buffer_f32, oilWalk);
    buffer_write(global.stateCodecBuffer, buffer_f32, paletteRefresh);
    buffer_write(global.stateCodecBuffer, buffer_f32, playLandSound);
    buffer_write(global.stateCodecBuffer, buffer_f32, playerID);
    stateCodecPrimitiveEncode(premask);
    stateCodecPrimitiveEncode(prevXScale);
    buffer_write(global.stateCodecBuffer, buffer_f32, quickWeaponScrollTimer);
    buffer_write(global.stateCodecBuffer, buffer_f32, readyTimer);
    stateCodecPrimitiveEncode(secondSlideMask);
    buffer_write(global.stateCodecBuffer, buffer_f32, shockLock);
    buffer_write(global.stateCodecBuffer, buffer_f32, shockedTime);
    buffer_write(global.stateCodecBuffer, buffer_f32, shootStandStillLock);
    buffer_write(global.stateCodecBuffer, buffer_f32, shootTimer);
    buffer_write(global.stateCodecBuffer, buffer_f32, showDuringReady);
    buffer_write(global.stateCodecBuffer, buffer_f32, showReady);
    buffer_write(global.stateCodecBuffer, buffer_f32, slideChargeLock);
    buffer_write(global.stateCodecBuffer, buffer_f32, slideFrames);
    buffer_write(global.stateCodecBuffer, buffer_f32, slideLock);
    buffer_write(global.stateCodecBuffer, buffer_f32, slideSpeed);
    buffer_write(global.stateCodecBuffer, buffer_f32, slideTimer);
    stateCodecPrimitiveEncode(spriteIDX);
    stateCodecPrimitiveEncode(spriteIDY);
    buffer_write(global.stateCodecBuffer, buffer_f32, spriteLoopEnd);
    buffer_write(global.stateCodecBuffer, buffer_f32, spriteLoopID);
    buffer_write(global.stateCodecBuffer, buffer_f32, spriteLoopPoint);
    buffer_write(global.stateCodecBuffer, buffer_f32, spriteLoopSpeed);
    buffer_write(global.stateCodecBuffer, buffer_f32, spriteLoopStart);
    buffer_write(global.stateCodecBuffer, buffer_f32, spriteX);
    buffer_write(global.stateCodecBuffer, buffer_f32, spriteY);
    stateCodecPrimitiveEncode(statusObject);
    buffer_write(global.stateCodecBuffer, buffer_f32, statusSliding);
    buffer_write(global.stateCodecBuffer, buffer_f32, stepFrames);
    stateCodecPrimitiveEncode(stepSpeed);
    buffer_write(global.stateCodecBuffer, buffer_f32, stepTimer);
    buffer_write(global.stateCodecBuffer, buffer_f32, teleportImg);
    buffer_write(global.stateCodecBuffer, buffer_f32, teleportLock);
    buffer_write(global.stateCodecBuffer, buffer_f32, teleportTimer);
    buffer_write(global.stateCodecBuffer, buffer_f32, teleporting);
    stateCodecPrimitiveEncode(vehicle);
    buffer_write(global.stateCodecBuffer, buffer_f32, viewPlayer);
    buffer_write(global.stateCodecBuffer, buffer_f32, walkSpeed);
    buffer_write(global.stateCodecBuffer, buffer_f32, xDir);
    buffer_write(global.stateCodecBuffer, buffer_f32, xScaleOverride);
    buffer_write(global.stateCodecBuffer, buffer_f32, yDir);
}
else
{
    animNameID = buffer_read(global.stateCodecBuffer, buffer_f32);
    animSpinOffset = buffer_read(global.stateCodecBuffer, buffer_f32);
    animSpinTurn = buffer_read(global.stateCodecBuffer, buffer_f32);
    blinkDuration = buffer_read(global.stateCodecBuffer, buffer_f32);
    blinkImage = buffer_read(global.stateCodecBuffer, buffer_f32);
    blinkTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    blinkTimerMax = buffer_read(global.stateCodecBuffer, buffer_f32);
    canMinJump = buffer_read(global.stateCodecBuffer, buffer_f32);
    chargeTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    climbLock = buffer_read(global.stateCodecBuffer, buffer_f32);
    climbShootXscale = buffer_read(global.stateCodecBuffer, buffer_f32);
    climbSpeed = buffer_read(global.stateCodecBuffer, buffer_f32);
    climbSpriteTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    climbing = buffer_read(global.stateCodecBuffer, buffer_f32);
    contactDamageMultiplier = buffer_read(global.stateCodecBuffer, buffer_f32);
    costumeID = buffer_read(global.stateCodecBuffer, buffer_f32);
    dashJumped = buffer_read(global.stateCodecBuffer, buffer_f32);
    dashSlide = buffer_read(global.stateCodecBuffer, buffer_f32);
    deathByPit = buffer_read(global.stateCodecBuffer, buffer_f32);
    deathTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    dieToPit = buffer_read(global.stateCodecBuffer, buffer_f32);
    drawWeaponIcon = buffer_read(global.stateCodecBuffer, buffer_f32);
    fanoutDistance = buffer_read(global.stateCodecBuffer, buffer_f32);
    firstSlideMask = stateCodecPrimitiveDecode();
    freezeTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    gravDir = buffer_read(global.stateCodecBuffer, buffer_f32);
    gravWater = stateCodecPrimitiveDecode();
    gravfactor = buffer_read(global.stateCodecBuffer, buffer_f32);
    hitLock = buffer_read(global.stateCodecBuffer, buffer_f32);
    hitTime = buffer_read(global.stateCodecBuffer, buffer_f32);
    i = buffer_read(global.stateCodecBuffer, buffer_f32);
    iceDec = buffer_read(global.stateCodecBuffer, buffer_f32);
    iceDecWalk = buffer_read(global.stateCodecBuffer, buffer_f32);
    icedLock = buffer_read(global.stateCodecBuffer, buffer_f32);
    initChargeTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    inked = buffer_read(global.stateCodecBuffer, buffer_f32);
    isCharge = buffer_read(global.stateCodecBuffer, buffer_f32);
    isFrozen = buffer_read(global.stateCodecBuffer, buffer_f32);
    isHit = buffer_read(global.stateCodecBuffer, buffer_f32);
    isShocked = buffer_read(global.stateCodecBuffer, buffer_f32);
    isShoot = buffer_read(global.stateCodecBuffer, buffer_f32);
    isSlide = buffer_read(global.stateCodecBuffer, buffer_f32);
    isStep = buffer_read(global.stateCodecBuffer, buffer_f32);
    jumpCounter = buffer_read(global.stateCodecBuffer, buffer_f32);
    jumpCounterMax = buffer_read(global.stateCodecBuffer, buffer_f32);
    jumpSpeed = stateCodecPrimitiveDecode();
    jumpSpeedWater = buffer_read(global.stateCodecBuffer, buffer_f32);
    maxVspeed = buffer_read(global.stateCodecBuffer, buffer_f32);
    movementXScale = stateCodecPrimitiveDecode();
    multiJumpDashCancel = buffer_read(global.stateCodecBuffer, buffer_f32);
    oilWalk = buffer_read(global.stateCodecBuffer, buffer_f32);
    paletteRefresh = buffer_read(global.stateCodecBuffer, buffer_f32);
    playLandSound = buffer_read(global.stateCodecBuffer, buffer_f32);
    playerID = buffer_read(global.stateCodecBuffer, buffer_f32);
    premask = stateCodecPrimitiveDecode();
    prevXScale = stateCodecPrimitiveDecode();
    quickWeaponScrollTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    readyTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    secondSlideMask = stateCodecPrimitiveDecode();
    shockLock = buffer_read(global.stateCodecBuffer, buffer_f32);
    shockedTime = buffer_read(global.stateCodecBuffer, buffer_f32);
    shootStandStillLock = buffer_read(global.stateCodecBuffer, buffer_f32);
    shootTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    showDuringReady = buffer_read(global.stateCodecBuffer, buffer_f32);
    showReady = buffer_read(global.stateCodecBuffer, buffer_f32);
    slideChargeLock = buffer_read(global.stateCodecBuffer, buffer_f32);
    slideFrames = buffer_read(global.stateCodecBuffer, buffer_f32);
    slideLock = buffer_read(global.stateCodecBuffer, buffer_f32);
    slideSpeed = buffer_read(global.stateCodecBuffer, buffer_f32);
    slideTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    spriteIDX = stateCodecPrimitiveDecode();
    spriteIDY = stateCodecPrimitiveDecode();
    spriteLoopEnd = buffer_read(global.stateCodecBuffer, buffer_f32);
    spriteLoopID = buffer_read(global.stateCodecBuffer, buffer_f32);
    spriteLoopPoint = buffer_read(global.stateCodecBuffer, buffer_f32);
    spriteLoopSpeed = buffer_read(global.stateCodecBuffer, buffer_f32);
    spriteLoopStart = buffer_read(global.stateCodecBuffer, buffer_f32);
    spriteX = buffer_read(global.stateCodecBuffer, buffer_f32);
    spriteY = buffer_read(global.stateCodecBuffer, buffer_f32);
    statusObject = stateCodecPrimitiveDecode();
    statusSliding = buffer_read(global.stateCodecBuffer, buffer_f32);
    stepFrames = buffer_read(global.stateCodecBuffer, buffer_f32);
    stepSpeed = stateCodecPrimitiveDecode();
    stepTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    teleportImg = buffer_read(global.stateCodecBuffer, buffer_f32);
    teleportLock = buffer_read(global.stateCodecBuffer, buffer_f32);
    teleportTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    teleporting = buffer_read(global.stateCodecBuffer, buffer_f32);
    vehicle = stateCodecPrimitiveDecode();
    viewPlayer = buffer_read(global.stateCodecBuffer, buffer_f32);
    walkSpeed = buffer_read(global.stateCodecBuffer, buffer_f32);
    xDir = buffer_read(global.stateCodecBuffer, buffer_f32);
    xScaleOverride = buffer_read(global.stateCodecBuffer, buffer_f32);
    yDir = buffer_read(global.stateCodecBuffer, buffer_f32);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playerDraw();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
