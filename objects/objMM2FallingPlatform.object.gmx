<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMM2FallingPlatform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
canHit = false;

isSolid = 2;

grav = 0;
blockCollision = 0;
bubbleTimer = -1;

timer = 0;
droptimer = 16;
dir = 0;

// super arm interaction
category = "superArmTarget";
superArmFlashTimer = 0;
superArmFlashInterval = 1;
superArmFlashOwner = noone;
superArmHoldOwner = noone;
superArmDeathOnDrop = true;
superArmThrown = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen &amp;&amp; !dead &amp;&amp; !global.timeStopped)
{
    if (timer &gt;= droptimer)
    {
        grav = 0.25 * dir;
    }
    else
    {
        var ontop = 0;
        with (target)
        {
            if (ground)
            {
                if (place_meeting(x, y + gravDir, other.id)
                    &amp;&amp; !place_meeting(x, y, other.id))
                {
                    other.timer += 1;
                    other.dir = gravDir;
                    ontop = 1;
                }
            }
        }
        if (!ontop)
        {
            timer = 0;
        }
    }
}
else if (dead)
{
    grav = 0;
    timer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Serialize instance variables.
/// This code was autogenerated by addSerialization.py

// Before editing manually, remove the following tag so that
// this event is not replaced when autogenerated again.

// @autogenerate

event_inherited();

if (global.stateCodecEncode)
{
    buffer_write(global.stateCodecBuffer, buffer_f32, dir);
    buffer_write(global.stateCodecBuffer, buffer_f32, droptimer);
    buffer_write(global.stateCodecBuffer, buffer_f32, superArmDeathOnDrop);
    buffer_write(global.stateCodecBuffer, buffer_f32, superArmFlashInterval);
    stateCodecPrimitiveEncode(superArmFlashOwner);
    buffer_write(global.stateCodecBuffer, buffer_f32, superArmFlashTimer);
    stateCodecPrimitiveEncode(superArmHoldOwner);
    buffer_write(global.stateCodecBuffer, buffer_f32, superArmThrown);
    buffer_write(global.stateCodecBuffer, buffer_f32, timer);
}
else
{
    dir = buffer_read(global.stateCodecBuffer, buffer_f32);
    droptimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    superArmDeathOnDrop = buffer_read(global.stateCodecBuffer, buffer_f32);
    superArmFlashInterval = buffer_read(global.stateCodecBuffer, buffer_f32);
    superArmFlashOwner = stateCodecPrimitiveDecode();
    superArmFlashTimer = buffer_read(global.stateCodecBuffer, buffer_f32);
    superArmHoldOwner = stateCodecPrimitiveDecode();
    superArmThrown = buffer_read(global.stateCodecBuffer, buffer_f32);
    timer = buffer_read(global.stateCodecBuffer, buffer_f32);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// super arm flash
if (superArmFlashTimer mod (2 * superArmFlashInterval) &gt;= superArmFlashInterval || superArmHoldOwner != noone || superArmThrown)
{
    draw_set_blend_mode(bm_add);
    draw_sprite(sprite_index, image_index, round(x), round(y));
    draw_set_blend_mode(bm_normal);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
