<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprStageSelectArrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-300</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sel_y = 0;
opt_n = 0;

enabled = true;
mode = 0;

if (!instance_exists(objNet))
{
    instance_create(0, 0, objNet);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != rmNetOptions)
    global.frozen = true;

if (!enabled)
    exit;

switch (mode)
{
    case 0:
        opt_n = 0;
        opts[opt_n++] = "HOST";
        opts[opt_n++] = "JOIN";
        opts[opt_n++] = "RETURN";
        if (global.keyUpPressed[0])
        {
            sel_y = (sel_y - 1 + opt_n) % opt_n;
        }
        if (global.keyDownPressed[0])
        {
            sel_y = (sel_y + 1 + opt_n) % opt_n;
        }
        if (((global.keyLeftPressed[0] || global.keyRightPressed[0]) &amp;&amp; sel_y == 0) || global.keyPausePressed[0])
        {
            if (sel_y == opt_n - 1)
            {
                global.nextRoom = rmTitleScreen;
                enabled = false;
                playSFX(sfxMenuSelect);
            }
            else if (opts[sel_y] == "HOST")
            {
                mode = 5;
                objNet.srv_password = "";
                opt_n = 0;
                portstr = string(objNet.srv_port);
                sel_y = 0;
                exit;
            }
            else if (opts[sel_y] == "JOIN")
            {
                mode = 6;
                sel_y = 0;
                local_players = global.playerCount;
                opt_n = 0;
                objNet.cli_password = "";
                portstr = string(objNet.srv_port);
                exit;
            }
        }
        break;
}

// host 
if (mode == 5)
{
    opt_n = 7;
    maxPlayers = string(objNet.srv_maxPlayers);
    maxConnections = string(objNet.srv_maxConnections);
    if (objNet.srv_maxPlayers &lt; 0)
        maxPlayers = "unlimited [!]";
    if (objNet.srv_maxPlayers &gt; 4)
        maxPlayers += " [!]";
    if (objNet.srv_maxConnections &lt; 0)
        maxConnections = "unlimited";
    
    opts = makeArray("NAME &gt; " + objNet.srv_title, "PWD &gt; " + string_copy("*", 1, string_length(objNet.srv_password)), "PORT &gt; " + portstr,
        "MAX PLAYERS: " + maxPlayers, "MAX CONNECTIONS: " + maxConnections, "START", "BACK");
    if (global.keyUpPressed[0] || (keyboard_check_pressed(vk_up) &amp;&amp; !global.keyDownPressed[0]))
    {
        sel_y = (sel_y - 1 + opt_n) % opt_n;
    }
    else if (global.keyDownPressed[0] || (keyboard_check_pressed(vk_down) &amp;&amp; !global.keyUpPressed[0]))
    {
        sel_y = (sel_y + 1 + opt_n) % opt_n;
    }
    else if (global.keyPausePressed[0] || global.keyRightPressed[0])
    {
        if (sel_y &lt;= 2)
            y += 1;
        if (sel_y == 3)
        {
            objNet.srv_maxPlayers = objNet.srv_maxPlayers + 1;
            if (objNet.srv_maxPlayers &lt;= 1)
            {
                objNet.srv_maxPlayers = 2;
            }
            if (objNet.srv_maxPlayers &gt; global.maxPlayerCount * 2)
                objNet.srv_maxPlayers = -1;
        }
        if (sel_y == 4)
        {
            objNet.srv_maxConnections = objNet.srv_maxConnections + 1;
            if (objNet.srv_maxConnections &gt; 16)
                objNet.srv_maxConnections = -1;
        }
        if (sel_y == 5)
        {
            if (portstr == "")
                portstr = string(objNet.DEFAULT_PORT);
            objNet.srv_port = string_digits(portstr);
            portstr = string(objNet.srv_port);
            if (server_start() != 0)
            {
                playSFX(sfxError);
            }
            else
            {
                room_goto(rmTitleScreen);
            }
        }
        if (sel_y == 6)
        {
            mode = 0;
            opt_n = 0;
            sel_y = 0;
            exit;
        }
    }
    else
    {
        if (keyboard_check_pressed(vk_backspace) || keyboard_check_pressed(vk_delete))
        {
            if (sel_y == 0 &amp;&amp; string_length(objNet.srv_title) &gt; 0)
                objNet.srv_title = string_copy(objNet.srv_title, 1, string_length(objNet.srv_title) - 1);
            if (sel_y == 1 &amp;&amp; string_length(objNet.srv_password) &gt; 0)
                objNet.srv_password = string_copy(objNet.srv_password, 1, string_length(objNet.srv_password) - 1);
            if (sel_y == 2 &amp;&amp; string_length(portstr) &gt; 0)
                portstr = string_copy(portstr, 1, string_length(portstr) - 1);
            keyboard_lastchar = "";
        }
        if (keyboard_check(vk_backspace))
            keyboard_lastchar = "";
        if (keyboard_lastchar != "")
        {
            if ((ord(keyboard_lastchar) &gt;= ord("a") &amp;&amp; ord(keyboard_lastchar) &lt;= ord("z"))
                || (ord(keyboard_lastchar) &gt;= ord("A") &amp;&amp; ord(keyboard_lastchar) &lt;= ord("Z"))
                || (ord(keyboard_lastchar) &gt;= ord("0") &amp;&amp; ord(keyboard_lastchar) &lt;= ord("9"))
                || ord(keyboard_lastchar) == ord("-") || ord(keyboard_lastchar) == ord("_")
                || ord(keyboard_lastchar) == ord("!") || ord(keyboard_lastchar) == ord("?")
                || ord(keyboard_lastchar) == ord("'") || ord(keyboard_lastchar) == ord(":")
                || ord(keyboard_lastchar) == ord(".") || ord(keyboard_lastchar) == ord(";")
                || ord(keyboard_lastchar) == ord(" ") || ord(keyboard_lastchar) == ord("=")
                || ord(keyboard_lastchar) == ord("(") || ord(keyboard_lastchar) == ord(")")
                || ord(keyboard_lastchar) == ord("/") || ord(keyboard_lastchar) == ord("+"))
            {
                if (sel_y == 0)
                    objNet.srv_title += keyboard_lastchar;
                if (sel_y == 1)
                    objNet.srv_password += keyboard_lastchar;
                if (sel_y == 2)
                {
                    c = ord(keyboard_lastchar) - ord("0");
                    if (c &gt;= 0 &amp;&amp; c &lt; 10)
                    {
                        portstr += keyboard_lastchar;
                    }
                    else
                        playSFX(sfxError);
                }
                keyboard_lastchar = "";
            }
            else
            {
                playSFX(sfxError);
                keyboard_lastchar = "";
            }
        }
        keyboard_lastkey = "";
    }
}

// join 
if (mode == 6)
{
    opt_n = 6;
    local_players_s = string(local_players);
    if (local_players == 0)
        local_player_s = "Observe";
    opts = makeArray("URL &gt; " + objNet.cli_host_url, "PORT &gt; " + portstr, "PWD &gt; " + string_copy("*", 1, string_length(objNet.cli_password)),
        "LOCAL PLAYERS: " + local_players_s, "START", "BACK");
    
    if (global.keyUpPressed[0] || (keyboard_check_pressed(vk_up) &amp;&amp; !global.keyDownPressed[0]))
    {
        sel_y = (sel_y - 1 + opt_n) % opt_n;
    }
    else if (global.keyDownPressed[0] || (keyboard_check_pressed(vk_down) &amp;&amp; !global.keyUpPressed[0]))
    {
        sel_y = (sel_y + 1 + opt_n) % opt_n;
    }
    else if (global.keyPausePressed[0])
    {
        if (sel_y &lt;= 2)
            y += 1;
        if (sel_y == 3)
        {
            local_players += 1;
            if (local_players &gt; global.maxPlayerCount)
                local_players = 0;
        }
        if (sel_y == 4)
        {
            if (portstr == "")
                portstr = string(objNet.DEFAULT_PORT);
            objNet.srv_port = string_digits(portstr);
            portstr = string(objNet.srv_port);
            global.playerCount = local_players;
            if (client_join() != 0)
            {
                playSFX(sfxError);
            }
            else
            {
                playSFX(sfxMenuSelect);
            }
        }
        if (sel_y == 5)
        {
            mode = 0;
            opt_n = 0;
            sel_y = 0;
            exit;
        }
    }
    else
    {
        if (keyboard_check_pressed(vk_backspace) || keyboard_check_pressed(vk_delete))
        {
            if (sel_y == 0 &amp;&amp; string_length(objNet.cli_host_url) &gt; 0)
                objNet.cli_host_url = string_copy(objNet.cli_host_url, 1, string_length(objNet.cli_host_url) - 1);
            if (sel_y == 1 &amp;&amp; string_length(portstr) &gt; 0)
                portstr = string_copy(portstr, 1, string_length(portstr) - 1);
            if (sel_y == 2 &amp;&amp; string_length(objNet.srv_password) &gt; 0)
                objNet.cli_host_password = string_copy(objNet.cli_host_password, 1, string_length(objNet.cli_host_password) - 1);
            keyboard_lastchar = "";
        }
        if (keyboard_check(vk_backspace))
            keyboard_lastchar = "";
        if (keyboard_lastchar != "")
        {
            if ((ord(keyboard_lastchar) &gt;= ord("a") &amp;&amp; ord(keyboard_lastchar) &lt;= ord("z"))
                || (ord(keyboard_lastchar) &gt;= ord("A") &amp;&amp; ord(keyboard_lastchar) &lt;= ord("Z"))
                || (ord(keyboard_lastchar) &gt;= ord("0") &amp;&amp; ord(keyboard_lastchar) &lt;= ord("9"))
                || ord(keyboard_lastchar) == ord("-") || ord(keyboard_lastchar) == ord("_")
                || ord(keyboard_lastchar) == ord("!") || ord(keyboard_lastchar) == ord("?")
                || ord(keyboard_lastchar) == ord("'") || ord(keyboard_lastchar) == ord(":")
                || ord(keyboard_lastchar) == ord(".") || ord(keyboard_lastchar) == ord(";")
                || ord(keyboard_lastchar) == ord(" ") || ord(keyboard_lastchar) == ord("=")
                || ord(keyboard_lastchar) == ord("(") || ord(keyboard_lastchar) == ord(")")
                || ord(keyboard_lastchar) == ord("/") || ord(keyboard_lastchar) == ord("+"))
            {
                if (sel_y == 0)
                    objNet.cli_host_url += keyboard_lastchar;
                if (sel_y == 2)
                    objNet.cli_host_password += keyboard_lastchar;
                if (sel_y == 1)
                {
                    c = ord(keyboard_lastchar) - ord("0");
                    if (c &gt;= 0 &amp;&amp; c &lt; 10)
                    {
                        portstr += keyboard_lastchar;
                    }
                    else
                        playSFX(sfxError);
                }
                keyboard_lastchar = "";
            }
            else
            {
                playSFX(sfxError);
                keyboard_lastchar = "";
            }
        }
        keyboard_lastkey = "";
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Serialize instance variables.
/// This code was autogenerated by addSerialization.py

// Before editing manually, remove the following tag so that
// this event is not replaced when autogenerated again.

// @autogenerate

// This object has no parent, so it is responsible
// for encoding basic instance properties.
stateCodecInstance();

if (global.stateCodecEncode)
{
    stateCodecPrimitiveEncode(enabled);
    stateCodecPrimitiveEncode(mode);
    stateCodecPrimitiveEncode(opt_n);
    stateCodecPrimitiveEncode(sel_y);
}
else
{
    enabled = stateCodecPrimitiveDecode();
    mode = stateCodecPrimitiveDecode();
    opt_n = stateCodecPrimitiveDecode();
    sel_y = stateCodecPrimitiveDecode();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
if room != rmNetOptions {
    draw_set_color(c_black);
    draw_rectangle(view_xview[0],view_yview[0],view_xview[0] + view_wview[0],view_yview[0] + view_hview[0],false);
}

draw_set_color(c_white);

draw_x = 48 + view_xview[0];
draw_y = 48 + view_yview[0];

draw_mx = view_xview[0] + view_wview[0]/2

if mode == 0 {
    for (var i=0;i&lt;opt_n;i+=1) {
        draw_text(draw_x,draw_y + 16*i, opts[i]);
        if sel_y == i
            draw_sprite(sprOptionsCursor,0,draw_x - 12, draw_y + 16*i)
    }
}

if mode == 1 {
    draw_set_halign(fa_left);
    draw_text(draw_x,draw_y,"TYPE CREDENTIALS:")
    draw_text(draw_x,draw_y+16,"NAME &gt; " + username_type)
    draw_text(draw_x,draw_y+32,"PASS &gt; " + string_repeat("*",string_length(password_type)))
    draw_text(draw_x,draw_y+48,"CONFIRM")
    draw_text(draw_x,draw_y+64,"CANCEL")
    draw_sprite(sprOptionsCursor,0,draw_x - 12, draw_y + 16*sel_y + 16)
    
    draw_set_halign(fa_center);
    draw_text(draw_mx,view_yview[0] + view_hview[0] - 80, checkstatus)
}

if mode == 5 || mode == 6 {
    draw_set_halign(fa_left);
    if mode == 5
        draw_text(draw_x,draw_y,"SERVE KEYFWD SESSION")
    if mode == 6
        draw_text(draw_x,draw_y,"JOIN KEYFWD SESSION")
    draw_text(draw_x,draw_y+8,"(NEEDS VERY LOW PING)")
    for (var i=0;i&lt;opt_n;i+=1) {
        draw_text(draw_x,draw_y+24 + 16*i,opts[i])
    }
    draw_sprite(sprOptionsCursor,0,draw_x - 12, draw_y + 16*sel_y + 24)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
