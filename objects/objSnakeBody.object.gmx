<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWiggitySnake</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
canHit = false;

grav = 0;
blockCollision = 0;

isSolid = 1;
shiftVisible = 1;

shakeSpeed = 1;

shakeDir = 1;
startDir = -99;
yOffset = 0;

snakeBoss = instance_nearest(x, y, objBigSnakey);
shake = true;

if (!instance_place(x - 16, y, objSnakeBody))
{
    getLength = 1;
    while (instance_place(x + 16 * getLength, y, objSnakeBody))
    {
        bod = instance_place(x + 16 * getLength, y, objSnakeBody);
        if (getLength mod 4 &gt;= 1 &amp;&amp; getLength mod 4 &lt;= 4)
        {
            bod.shakeDir = -1;
            if (getLength mod 4 == 1)
            {
                bod.yOffset = 8;
            }
            if (getLength mod 4 == 3 || getLength mod 4 == 4)
            {
                bod.yOffset = -8;
            }
        }
        
        //        bod.startDir = bod.dir;
        getLength += 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (startDir == -99)
    startDir = shakeDir;
if (!global.frozen &amp;&amp; !dead &amp;&amp; !global.timeStopped)
{
    if (shake)
    {
        yspeed = shakeSpeed * shakeDir;
        
        if (y &gt;= ystart + 8)
        {
            shakeDir = -1;
        }
        if (y &lt;= ystart - 8)
        {
            shakeDir = 1;
        }
        if (instance_exists(snakeBoss))
        {
            if (snakeBoss.dead &amp;&amp; insideSection(snakeBoss.x, snakeBoss.y))
            {
                shake = false;
                yspeed = 0;
            }
        }
        else
        {
            shake = false;
            yspeed = 0;
        }
    }
    else
    {
        if (instance_exists(snakeBoss))
        {
            shake = 1;
        }
    }
}
else if (dead)
{
    shakeDir = startDir;
    y = ystart + yOffset;
    shake = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Serialize instance variables.
/// This code was autogenerated by addSerialization.py

// Before editing manually, remove the following tag so that
// this event is not replaced when autogenerated again.

// @autogenerate

event_inherited();

if (global.stateCodecEncode)
{
    stateCodecIDEncode(bod);
    buffer_write(global.stateCodecBuffer, buffer_f32, getLength);
    buffer_write(global.stateCodecBuffer, buffer_f32, shake);
    buffer_write(global.stateCodecBuffer, buffer_f32, shakeDir);
    buffer_write(global.stateCodecBuffer, buffer_f32, shakeSpeed);
    stateCodecIDEncode(snakeBoss);
    buffer_write(global.stateCodecBuffer, buffer_f32, startDir);
    buffer_write(global.stateCodecBuffer, buffer_f32, yOffset);
}
else
{
    bod = stateCodecIDDecode();
    getLength = buffer_read(global.stateCodecBuffer, buffer_f32);
    shake = buffer_read(global.stateCodecBuffer, buffer_f32);
    shakeDir = buffer_read(global.stateCodecBuffer, buffer_f32);
    shakeSpeed = buffer_read(global.stateCodecBuffer, buffer_f32);
    snakeBoss = stateCodecIDDecode();
    startDir = buffer_read(global.stateCodecBuffer, buffer_f32);
    yOffset = buffer_read(global.stateCodecBuffer, buffer_f32);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
