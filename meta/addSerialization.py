import os
import sys
# enhanced regex features from the regex (not re) library are required
import regex
import statistics

from processVariables import walkObjects

if len(sys.argv) <= 1:
    print("usage: ./addSerialization.py project-directory")
    sys.exit()
    
eventMarker = "<event eventtype=\"{}\" enumb=\"{}\">"
reEventMarker = regex.compile(eventMarker.format("([0-9]+)", "([0-9]+)"))
reAutoGenerateTag = regex.compile(r"/[/\*][/\*\s]*@autogenerate", regex.IGNORECASE)

newEvent = \
"""{}<event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{}</string>
          </argument>
        </arguments>
      </action>
    </event>"""

scriptDirectory = os.path.join(sys.argv[-1], "scripts")

def getSerializationCode(var, type, isArray):
	codeEncode = ""
	codeDecode = ""
	if type == 'id':
		if isArray:
			codeEncode += "stateCodecIDArrayEncode({});\n".format(var)
			codeDecode += "{} = stateCodecIDArrayDecode();\n".format(var)
		else:
			codeEncode += "stateCodecIDEncode({});\n".format(var)
			codeDecode += "{} = stateCodecIDDecode();\n".format(var)
	elif type == 'surface':
		if isArray:
			print("WARNING: arrays of surfaces not implemented. Variable: " + var)
		else:
			codeEncode += "stateCodecSurfaceEncode({});\n".format(var)
			codeDecode += "{} = stateCodecSurfaceDecode();\n".format(var)
	elif type == 'map' or type == 'list' or type == 'grid' or type == 'stack' or type == 'queue' or type == 'priority':
		if isArray:
			print("WARNING: arrays of data structures not implemented. Variable: " + var)
		else:
			# encoding/decoding data structures will require a lot of sneakiness.
			codeEncode += "stateCodecDSEncode({}, ds_type_{});\n".format(var, type)
			codeDecode += "{} = stateCodecDSDecode(ds_type_{});\n".format(var, type)
	elif type == 'external-function':
		pass
	elif type == 'number':
		if isArray:
			codeEncode += "stateCodecPrimitiveEncode({});\n".format(var)
			codeDecode += "{} = stateCodecPrimitiveDecode();\n".format(var)
		else:
			codeEncode += 'buffer_write(global.stateCodecBuffer, buffer_f32, {});\n'.format(var)
			codeDecode += '{} = buffer_read(global.stateCodecBuffer, buffer_f32);\n'.format(var)
	elif type == 'string':
		if isArray:
			codeEncode += "stateCodecPrimitiveEncode({});\n".format(var)
			codeDecode += "{} = stateCodecPrimitiveDecode();\n".format(var)
		else:
			codeEncode += 'buffer_write(global.stateCodecBuffer, buffer_string, {});\n'.format(var)
			codeDecode += '{} = buffer_read(global.stateCodecBuffer, buffer_string);\n'.format(var)
	else:
		codeEncode += "stateCodecPrimitiveEncode({});\n".format(var)
		codeDecode += "{} = stateCodecPrimitiveDecode();\n".format(var)
	return codeEncode, codeDecode	

# variables not to encode
ignore = [
# static
'global.lastObject',
'global.lastBackground',
'global.lastSprite',
'global.lastScript',
'global.nesPalette',
'global.sinTableID',

# transient
'global.resimulating'
'global.createArgument',
'global.playerProjectileCreator',
'global.gml_fn_retval',
'global.execute_gml_function_ERR',

# config
'global.vsync',
'global.musicvolume',
'global.musicVolume',
'global.soundVolume',
'global.screensize',
'global.downKey',
'global.joystick_jumpKey',
'global.joystick_pauseKey',
'global.joystick_shootKey',
'global.joystick_slideKey',
'global.joystick_weaponSwitchLeftKey',
'global.joystick_weaponSwitchRightKey',
'global.jumpKey',
'global.leftKey',
'global.pauseKey',
'global.rightKey',
'global.shootKey',
'global.slideKey',
'global.upKey',
'global.weaponSwitchLeftKey',
'global.weaponSwitchRightKey',
]

# ignore variables that start with these
ignoreWC = [
# static from filesystem
'global.dll_',
'global.roomExternal',

#transient
'global.sl_',
'global.retval',

# too cumbersome to support and not relevant
'global.unitTest',
'global.unitSuite',
'global.record',

# recursion
'global.stateCodec'
]

ignoreFiles = [
os.path.join(scriptDirectory, "stateEncodeGlobals.gml"),
os.path.join(scriptDirectory, "getInstanceVariableArray.gml"),
os.path.join(scriptDirectory, "setInstanceVariableArray.gml"),
os.path.join(scriptDirectory, "getInstanceVariable.gml"),
os.path.join(scriptDirectory, "setInstanceVariable.gml"),
]
	
for result in walkObjects(sys.argv[-1], True, None, ignoreFiles):
	if result.globals:
		initializeGlobals = []
		with open(os.path.join(scriptDirectory, "stateCodecGlobals.gml"), "w", encoding="utf8") as file:
			code = """/// stateCodecGlobals()
/// Serializes/deserializes all global variables.
/// This code was autogenerated by addSerialization.py
/// Do not edit this code manually.

"""
			codeEncode = "\n"
			codeDecode = "\n"
			indent = "    "
			for var in sorted(list(result.variables)):
				if var in ignore:
					continue
				ignoreThis = False
				for wc in ignoreWC:
					if var.startswith(wc):
						ignoreThis = True
						break
				if ignoreThis:
					continue
				isArray = False
				type = ''
				if var in result.variableType.keys():
					type = result.variableType[var]
				if var in result.variableIsArray:
					isArray = True
				varCodeEncode, varCodeDecode = getSerializationCode(var, type, isArray)
				if len(varCodeEncode + varCodeDecode) > 0:
					codeEncode += indent + varCodeEncode
					codeDecode += indent + varCodeDecode
					initializeGlobals.append(var)
			code += "if (global.stateCodecEncode)\n{{{}}}\nelse\n{{{}}}\n"
			code = code.format(codeEncode, codeDecode)
			file.write(code)
		with open(os.path.join(scriptDirectory, "stateCodecGlobalsInit.gml"), "w", encoding="utf8") as file:
			code = """/// stateCodecGlobalsInit()
/// Initializes all global variables to ensure that serialization later does not error.
/// This code was autogenerated by addSerialization.py
/// Do not edit this code manually.

"""
			for var in initializeGlobals:
				if not var.startswith("global."):
					code += "globalvar "
				code += var + " = 0;\n"
			
			file.write(code)
	if not result.globals:
		fcontents = ""
		with open(result.path, "r", encoding="utf8") as file:
			fcontents = file.read()
		
		ev5Index = fcontents.find(eventMarker.format("7", "15"))
		ev5Span = ()
		addEventsTag = "    "
		if ev5Index == -1:
			# insert after previous event
			prevIndex = -1
			while True:
				match = reEventMarker.search(fcontents, prevIndex + 1)
				if match is None:
					break
				index = match.span()[0]
				if int(match.group(1)) > 7:
					break
				elif int(match.group(1)) == 7 and int(match.group(2)) > 15:
					break
				prevIndex = index
			# find suitable insertion for end of previous event:
			if prevIndex == -1:
				# no events prior to insertion point.
				ev5Index = fcontents.find("<events>") + len("<events>\n")
				if ev5Index == -1:
					# no events at all!
					ev5Index = fcontents.find("<events/>")
					assert(ev5Index != -1)
					addEventsTag="  <events>\n    "
				ev5Span = (ev5Index, ev5Index)
			else:
				# an insertion point was found.
				ev5Index = fcontents.find("</event>", prevIndex) + len("</event>\n")
				ev5Span = (ev5Index, ev5Index)
		else:
			# replace existing user-event 5
			ev5EndIndex = fcontents.find("</event>", ev5Index)
			if ev5EndIndex == -1:
				# broken
				continue
			else:
				ev5Span = (ev5Index, ev5EndIndex + len("</event>"))
				addEventsTag = ""
				if reAutoGenerateTag.search(fcontents, ev5Index, ev5EndIndex) is None:
					# file marked as non-autogenerable
					continue

		# now have ev5Span, substitute in code.

		# determine code:
		code = \
	"""/// Serialize instance variables.
/// This code was autogenerated by addSerialization.py

// Before editing manually, remove the following tag so that
// this event is not replaced when autogenerated again.

// @autogenerate

"""
		hasSerialization = False
		hasVars = False
		if result.parentResult is None:
			code += "// This object has no parent, so it is responsible\n// for encoding basic instance properties.\n"
			code += "stateCodecInstance();\n\n"
			hasSerialization = True
		else:
			code += "event_inherited();\n\n"
		codeEncode = "\n"
		codeDecode = "\n"
		indent = "    "
		for var in sorted(list(result.instanceVariablesDefinite)):
			hasSerialization = True
			hasVars = True
			isArray = False
			type = ''
			if var in result.instanceVariableType.keys():
				type = result.instanceVariableType[var]
			if var in result.instanceVariableIsArray:
				isArray = True
			varCodeEncode, varCodeDecode = getSerializationCode(var, type, isArray)
			if len(varCodeEncode + varCodeDecode) > 0:
				codeEncode += indent + varCodeEncode
				codeDecode += indent + varCodeDecode
				

		if hasSerialization:
			if hasVars:
				code += "if (global.stateCodecEncode)\n{{{}}}\nelse\n{{{}}}\n"
			code = code.format(codeEncode, codeDecode)
			fcontents = fcontents[:ev5Span[0]] + newEvent.format(addEventsTag, code) + fcontents[ev5Span[1]:]
			with open(result.path, "w", encoding="utf8") as file:
				file.write(fcontents)

				