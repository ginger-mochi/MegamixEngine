import regex
import statistics
import os
import sys
from processVariables import walkObjects

if len(sys.argv) <= 1:
	print("usage: ./addSerialization.py object-directory")
	sys.exit()
	
eventMarker = "<event eventtype=\"{}\" enumb=\"{}\">"
reEventMarker = eventMarker.format("([a-z]+)", "([a-z]+)")
reNoScriptTag = regex.compile(r"/[/\*][/\*\s]*@autogenerate", regex.IGNORECASE)

newEvent = \
"""    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{}</string>
          </argument>
        </arguments>
      </action>
    </event>"""

for result in walkObjects("../objects"):
    fcontents = ""
    with open(result.path, "r") as file:
        fcontents = file.read()
    
    ev5Index = fcontents.search(eventMarker.format("7", "15"))
    ev5Span = ()
    if ev5Index == -1:
        # insert after previous event
        prevIndex = -1
        while True:
            match = reEventMarker.find(prevIndex + 1)
            if match is None:
                break
            index = match.span()[0]
            if int(match.group(1)) > 7:
                break
            elif int(match.group(1)) == 7 and int(match.group(2)) > 15:
                break
            prevIndex = index
        # find suitable insertion for end of previous event:
        if prevIndex == -1:
            ev5Index = fcontents.search("<events>") + len("<events>\n")
            assert(ev5Index > 10)
            ev5Span = (ev5Index, ev5Index)
        else:
            ev5Index = fcontents.search("</event>", prevIndex) + len("</event>\n")
            assert(ev5Index > 10)
            ev5Span = (ev5Index, ev5Index)
    else:
        # replace existing user-event 5
        ev5EndIndex = fcontents.search("</event>", ev5Index)
        if ev5EndIndex == -1:
            # broken
            continue
        else:
            ev5Span = (ev5Index, ev5EndIndex + len("</event>"))
            if reAutoGenerateTag.search(fcontents, ev5Index, ev5EndIndex) is None:
                # file marked as non-autogenerable
                continue

    # now have ev5Span, substitute in code.

    # determine code:
    code = \
"""/// Serialize instance variables.
/// This code was autogenerated by addSerialization.py

// Before editing manually, remove the following tag so that
// this event is not replaced when autogenerated again.

// @autogenerate

"""
    if result.parentResult is None:
        code += "// This object has no parent, so it is responsible\n// for encoding basic instance properties."
        code += "stateCodecInstance();\n\n"
    else:
        code += "event_inherited();\n\n"
    code += "if (global.stateCodecEncode)\n{{{}\n}}\nelse\n{{{}\n}}"
    codeEncode = "\n"
    codeDecode = "\n"
    indent = "    "
    for var in result.instanceVariablesDefinite():
        if var in result.swizzledType.keys():
            swizzledType = result.swizzledType[var]
            if swizzledType == 'id':
                codeEncode += "{}stateCodecIDEncode({});\n".format(indent, var)
                codeDecode += "{}{} = stateCodecIDDecode();\n".format(indent, var)
            else:
                # encoding/decoding data structures will require a lot of sneakiness.
                codeEncode += "{}stateCodecDSEncode({}, ds_{});\n".format(indent, var, swizzledType)
                codeDecode += "{}{} = stateCodecDSEncode({}, ds_{});\n".format(indent, var, swizzledType)
        else:
            codeEncode += "{}stateCodecPrimitiveEncode({});\n".format(indent, var)
            codeDecode += "{}{} = stateCodecPrimitiveDecode();\n".format(indent, var)
            

    code = code.format(codeEncode, codeDecode)
    fcontents = fcontents[:ev5Span[0]] + newEvent.format(code) + fcontents[ev5Span[1]:]
    print(result.path)
    print(code)
    print("----------")
